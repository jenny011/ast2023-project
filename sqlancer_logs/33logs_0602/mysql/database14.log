--java.lang.AssertionError: SELECT * FROM (SELECT SQL_BIG_RESULT SQL_NO_CACHE SQL_SMALL_RESULT STRAIGHT_JOIN t0.c0 AS ref0, t1.c0 AS ref1, t1.c1 AS ref2, t2.c0 AS ref3 FROM t0, t1, t2 WHERE (! ((t0.c0) >= (t2.c0))) GROUP BY t0.c0, t1.c0, t1.c1, t2.c0 ORDER BY LEAST((t1.c0) IS NOT TRUE,  EXISTS (SELECT 1 wHERE FALSE)) ASC LIMIT 2147483647) as result WHERE result.ref0 = -253839263 AND result.ref1 IS NULL AND result.ref2 IS NULL AND result.ref3 = 8388607;
--	at sqlancer.common.query.SQLQueryAdapter.checkException(SQLQueryAdapter.java:111)
--	at sqlancer.common.query.SQLQueryAdapter.executeAndGet(SQLQueryAdapter.java:141)
--	at sqlancer.common.oracle.PivotedQuerySynthesisBase.containsRows(PivotedQuerySynthesisBase.java:67)
--	at sqlancer.common.oracle.PivotedQuerySynthesisBase.check(PivotedQuerySynthesisBase.java:49)
--	at sqlancer.ProviderAdapter.generateAndTestDatabase(ProviderAdapter.java:61)
--	at sqlancer.Main$DBMSExecutor.run(Main.java:364)
--	at sqlancer.Main$2.run(Main.java:559)
--	at sqlancer.Main$2.runThread(Main.java:541)
--	at sqlancer.Main$2.run(Main.java:532)
--	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
--	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
--	at java.base/java.lang.Thread.run(Thread.java:829)
--Caused by: java.sql.SQLException: Memory capacity exceeded (capacity 8388608 bytes)
--	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)
--	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
--	at com.mysql.cj.jdbc.StatementImpl.executeQuery(StatementImpl.java:1200)
--	at sqlancer.common.query.SQLQueryAdapter.executeAndGet(SQLQueryAdapter.java:131)
--	... 10 more
---- Time: 2023/06/01 13:14:44
-- Database: database14
-- Database version: 8.0.33
-- seed value: 1685617329552
DROP DATABASE IF EXISTS database14;
CREATE DATABASE database14;
USE database14;
CREATE TABLE IF NOT EXISTS t0(c0 BIGINT(246)  NULL) ;
CREATE TABLE t1(c0 MEDIUMINT  UNIQUE KEY  COMMENT 'asdf'  STORAGE MEMORY COLUMN_FORMAT DYNAMIC, c1 MEDIUMINT  COLUMN_FORMAT FIXED  UNIQUE COMMENT 'asdf'  NULL) ;
CREATE TABLE IF NOT EXISTS t2 LIKE t1;
ALTER TABLE t0 RENAME TO t2, ROW_FORMAT DEFAULT;
ALTER TABLE t2 ROW_FORMAT DEFAULT, COMPRESSION 'LZ4', STATS_PERSISTENT 0, DISABLE KEYS, INSERT_METHOD LAST, ALGORITHM DEFAULT, DELAY_KEY_WRITE 0, RENAME t0;
ALTER TABLE t2 ROW_FORMAT DEFAULT, CHECKSUM 0, FORCE, ALGORITHM INPLACE, ENABLE KEYS, INSERT_METHOD FIRST, DROP c1, STATS_AUTO_RECALC 0, DELAY_KEY_WRITE 0;
ALTER TABLE t0 STATS_PERSISTENT 1, CHECKSUM 1, DELAY_KEY_WRITE 0, PACK_KEYS 0, STATS_AUTO_RECALC 0, FORCE, ALGORITHM INPLACE, ROW_FORMAT DEFAULT;
DELETE QUICK IGNORE FROM t0 WHERE (t0.c0) IS FALSE;
REPLACE INTO t0(c0) VALUES(NULL);
REPLACE INTO t1(c0, c1) VALUES(-3773833, -1910076389);
INSERT IGNORE INTO t2(c1) VALUES(-236385676);
DELETE LOW_PRIORITY IGNORE FROM t0 WHERE CAST(CAST((-1285059246) || (t0.c0) AS SIGNED) AS SIGNED);
REPLACE INTO t1(c0) VALUES(NULL);
REPLACE LOW_PRIORITY INTO t0(c0) VALUES(NULL);
REPLACE LOW_PRIORITY INTO t0(c0) VALUES(NULL);
CHECKSUM TABLE t1, t2, t0 EXTENDED;
ANALYZE LOCAL TABLE t0 UPDATE HISTOGRAM ON c0;
DELETE LOW_PRIORITY IGNORE FROM t1;
INSERT LOW_PRIORITY IGNORE INTO t1(c1) VALUES(NULL);
INSERT LOW_PRIORITY INTO t0(c0) VALUES(56683863);
INSERT LOW_PRIORITY IGNORE INTO t1(c0) VALUES(NULL);
CREATE INDEX i0 USING BTREE ON t1((1408343701), ((( EXISTS (SELECT 1 wHERE FALSE)) > ('*MAqBpa7')) IS TRUE)) VISIBLE ALGORITHM INPLACE;
CREATE INDEX i0 ON t1(c1 ASC, c0) ALGORITHM= DEFAULT;
ALTER TABLE t0 ;
INSERT LOW_PRIORITY IGNORE INTO t0(c0) VALUES(''), (NULL), ('-180513018');
ALTER TABLE t2 INSERT_METHOD NO, FORCE, STATS_PERSISTENT DEFAULT, DROP c1, DISABLE KEYS, ALGORITHM DEFAULT;
INSERT DELAYED IGNORE INTO t2(c0) VALUES(140573385), (32369197), (NULL);
REPLACE LOW_PRIORITY INTO t0(c0) VALUES(-253839263);
DELETE FROM t1 WHERE t1.c0;
SET SESSION range_alloc_block_size = 3859477815349648331;
REPLACE INTO t0(c0) VALUES("%7"), (NULL), ('*N#1');
INSERT HIGH_PRIORITY INTO t0(c0) VALUES(NULL);
SET SESSION histogram_generation_max_mem_size = 4784955330978693844;
REPLACE LOW_PRIORITY INTO t1(c0) VALUES(NULL);
REPLACE DELAYED INTO t0(c0) VALUES("1830081378");
INSERT HIGH_PRIORITY INTO t0(c0) VALUES('');
REPLACE INTO t0(c0) VALUES(-387781110);
INSERT INTO t1(c1) VALUES("U4R");
REPLACE INTO t1(c1, c0) VALUES('<u', 'q93VEgc]');
REPLACE INTO t1(c0) VALUES('');
REPLACE DELAYED INTO t1(c0, c1) VALUES(1209106080, "-1561950565");
REPLACE INTO t1(c1) VALUES(-108286805);
REPLACE INTO t1(c0, c1) VALUES(NULL, 2060269808);
INSERT INTO t2(c0) VALUES(NULL);
ALTER TABLE t1 ALGORITHM INPLACE, RENAME t2, COMPRESSION 'ZLIB', FORCE, DELAY_KEY_WRITE 1, CHECKSUM 0, INSERT_METHOD NO, STATS_AUTO_RECALC 1, DROP COLUMN c0;
ALTER TABLE t2 ;
SELECT * FROM (SELECT SQL_BIG_RESULT SQL_NO_CACHE SQL_SMALL_RESULT STRAIGHT_JOIN t0.c0 AS ref0, t1.c0 AS ref1, t1.c1 AS ref2, t2.c0 AS ref3 FROM t0, t1, t2 WHERE (! ((t0.c0) >= (t2.c0))) GROUP BY t0.c0, t1.c0, t1.c1, t2.c0 ORDER BY LEAST((t1.c0) IS NOT TRUE,  EXISTS (SELECT 1 wHERE FALSE)) ASC LIMIT 2147483647) as result WHERE result.ref0 = -253839263 AND result.ref1 IS NULL AND result.ref2 IS NULL AND result.ref3 = 8388607;
